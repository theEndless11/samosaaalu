{"version":3,"sources":["app.js"],"names":["document","addEventListener","username","ably","Ably","Realtime","key","chatChannel","channels","get","displayMessage","message","mediaUrl","timestamp","messageElement","createElement","className","time","Date","toLocaleTimeString","innerHTML","getElementById","appendChild","scrollTop","scrollHeight","fetchMessages","fetch","response","json","messages","forEach","console","error","subscribe","data","messageInput","fileInput","value","trim","alert","files","length","formData","FormData","append","method","body","uploadResponse","uploadedMediaUrl","headers","JSON","stringify","event","target"],"mappings":"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","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    let username = '';\r\n    const ably = new Ably.Realtime({ key: 'A2d_-A.1BaGMw:stl13eplJUOlO1UI5slUxDy9S17jg6FaoM9CsWQJYUk' });\r\n    const chatChannel = ably.channels.get('chat-channel');\r\n\r\n    // Function to display a message\r\n    function displayMessage({ username, message, mediaUrl, timestamp }) {\r\n        const messageElement = document.createElement('div');\r\n        messageElement.className = 'message';\r\n\r\n        const time = new Date(timestamp).toLocaleTimeString();\r\n        messageElement.innerHTML = `\r\n            <div class=\"msg-bubble ${username === 'you' ? 'user-msg' : 'bot-msg'}\">\r\n                <strong>${username}</strong> <span>(${time})</span><br>\r\n                ${message || ''}\r\n                ${mediaUrl ? `<br><img src=\"${mediaUrl}\" alt=\"Media\" style=\"max-width: 100%;\">` : ''}\r\n            </div>\r\n        `;\r\n\r\n        document.getElementById('messages-container').appendChild(messageElement);\r\n        document.getElementById('messages-container').scrollTop = document.getElementById('messages-container').scrollHeight;\r\n    }\r\n\r\n    // Fetch messages on load\r\n    async function fetchMessages() {\r\n        try {\r\n            const response = await fetch('/messages');\r\n            const messages = await response.json();\r\n            messages.forEach(displayMessage);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    }\r\n\r\n    // Listen for new messages\r\n    chatChannel.subscribe('new-message', (message) => {\r\n        displayMessage(message.data);\r\n    });\r\n\r\n    // Handle message sending\r\n    document.getElementById('send-message-btn').addEventListener('click', async () => {\r\n        const messageInput = document.getElementById('user-message');\r\n        const fileInput = document.getElementById('file-input');\r\n        const message = messageInput.value.trim();\r\n\r\n        if (!username) {\r\n            alert(\"Please enter a username before sending a message.\");\r\n            return;\r\n        }\r\n\r\n        if (message || (fileInput && fileInput.files.length > 0)) {\r\n            let mediaUrl = '';\r\n\r\n            if (fileInput && fileInput.files.length > 0) {\r\n                const formData = new FormData();\r\n                formData.append('file', fileInput.files[0]);\r\n\r\n                try {\r\n                    const uploadResponse = await fetch('/upload', { method: 'POST', body: formData });\r\n                    const { mediaUrl: uploadedMediaUrl } = await uploadResponse.json();\r\n                    mediaUrl = uploadedMediaUrl;\r\n                } catch (error) {\r\n                    console.error('Error uploading file:', error);\r\n                    alert('Failed to upload file.');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            try {\r\n                await fetch('/send-message', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ username, message, mediaUrl })\r\n                });\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n                alert('Failed to send message.');\r\n            }\r\n\r\n            messageInput.value = '';\r\n            if (fileInput) fileInput.value = ''; // Clear the file input\r\n        } else {\r\n            alert(\"Message cannot be empty.\");\r\n        }\r\n    });\r\n\r\n    // Set username\r\n    document.getElementById('username-input').addEventListener('input', (event) => {\r\n        username = event.target.value.trim() || 'you';\r\n    });\r\n\r\n    // Clear chat\r\n    document.getElementById('clear-chat-btn').addEventListener('click', async () => {\r\n        try {\r\n            await fetch('/messages', { method: 'DELETE' });\r\n            document.getElementById('messages-container').innerHTML = '';\r\n        } catch (error) {\r\n            console.error('Error clearing chat:', error);\r\n            alert('Failed to clear chat.');\r\n        }\r\n    });\r\n\r\n    // Initial messages fetch\r\n    fetchMessages();\r\n});\r\n"],"file":"app.dev.js"}