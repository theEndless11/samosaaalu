{"version":3,"sources":["server.js"],"names":["require","config","express","multer","Ably","mongoose","app","env","PORT","connect","process","MONGODB_URI","useNewUrlParser","useUnifiedTopology","log","err","console","error","messageSchema","Schema","mediaUrl","String","now","then","model","ably","Realtime","key","ABLY_KEY","channel","channels","get","message","storage","Date","destination","req","file","cb","filename","path","extname","originalname","use","json","fs","mkdirSync","post","res","_req$body","username","newMessage","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","send","Message","awrap","existsSync","save","publish","timestamp","t0","stop","upload","single","concat","messages","_context2","find","sort","sent","_context3","join","__dirname","listen"],"mappings":"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","file":"server.min.js","sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst Ably = require('ably');\r\nconst fs = require('fs');\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch(err => console.error('MongoDB connection error:', err));\r\n\r\nconst messageSchema = new mongoose.Schema({\r\n    username: String,\r\n    message: String,\r\n    mediaUrl: String,\r\n    timestamp: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Message = mongoose.model('Message', messageSchema);\r\n\r\n// Ably setup\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_KEY });\r\nconst channel = ably.channels.get('chat-channel');\r\n\r\n// Middleware\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// File upload setup\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'uploads/');\r\n    },\r\n    filename: (req, file, cb) => {\r\n        cb(null, Date.now() + path.extname(file.originalname));\r\n    }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\n// Ensure uploads folder exists\r\nif (!fs.existsSync('uploads')) {\r\n    fs.mkdirSync('uploads');\r\n}\r\n\r\n// Route to send message\r\napp.post('/send-message', async (req, res) => {\r\n    const { username, message, mediaUrl } = req.body;\r\n\r\n    if (!username || (!message && !mediaUrl)) {\r\n        return res.status(400).send({ error: 'Username and either message or media are required' });\r\n    }\r\n\r\n    const newMessage = new Message({ username, message, mediaUrl });\r\n    try {\r\n        await newMessage.save();\r\n\r\n        // Publish message to Ably\r\n        channel.publish('new-message', { username, message, mediaUrl, timestamp: newMessage.timestamp });\r\n\r\n        res.status(200).send('Message sent');\r\n    } catch (error) {\r\n        console.error('Error saving message:', error);\r\n        res.status(500).send({ error: 'Error saving message' });\r\n    }\r\n});\r\n\r\n// File upload route\r\napp.post('/upload', upload.single('file'), (req, res) => {\r\n    if (!req.file) {\r\n        return res.status(400).send({ error: 'No file uploaded' });\r\n    }\r\n    const mediaUrl = `/uploads/${req.file.filename}`;  // Fixed the string interpolation here\r\n    res.json({ mediaUrl });\r\n});\r\n\r\n// Fetch all messages\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: 1 });\r\n        res.json(messages);\r\n    } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n        res.status(500).send({ error: 'Error fetching messages' });\r\n    }\r\n});\r\n\r\n// Clear all messages\r\napp.delete('/messages', async (req, res) => {\r\n    try {\r\n        await Message.deleteMany({});\r\n        res.status(200).send('Chat cleared');\r\n    } catch (error) {\r\n        console.error('Error clearing chat:', error);\r\n        res.status(500).send({ error: 'Error clearing chat' });\r\n    }\r\n});\r\n\r\n// Serve static files (e.g., images, CSS, JS)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start server\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`); // Fixed the console log\r\n});\r\n"]}