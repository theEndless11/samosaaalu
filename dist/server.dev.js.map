{"version":3,"sources":["server.js"],"names":["require","config","express","mongoose","multer","path","Ably","fs","app","PORT","process","env","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","then","console","log","err","error","messageSchema","Schema","username","String","message","mediaUrl","timestamp","type","Date","now","Message","model","ably","Realtime","key","ABLY_KEY","channel","channels","get","use","json","storage","diskStorage","destination","req","file","cb","filename","extname","originalname","upload","existsSync","mkdirSync","post","res","body","status","send","newMessage","save","publish","single","find","sort","messages","deleteMany","join","__dirname","listen"],"mappings":"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","sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst multer = require('multer');\r\nconst path = require('path');\r\nconst Ably = require('ably');\r\nconst fs = require('fs');\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch(err => console.error('MongoDB connection error:', err));\r\n\r\nconst messageSchema = new mongoose.Schema({\r\n    username: String,\r\n    message: String,\r\n    mediaUrl: String,\r\n    timestamp: { type: Date, default: Date.now }\r\n});\r\n\r\nconst Message = mongoose.model('Message', messageSchema);\r\n\r\n// Ably setup\r\nconst ably = new Ably.Realtime({ key: process.env.ABLY_KEY });\r\nconst channel = ably.channels.get('chat-channel');\r\n\r\n// Middleware\r\napp.use(express.static('public'));\r\napp.use(express.json());\r\n\r\n// File upload setup\r\nconst storage = multer.diskStorage({\r\n    destination: (req, file, cb) => {\r\n        cb(null, 'uploads/');\r\n    },\r\n    filename: (req, file, cb) => {\r\n        cb(null, Date.now() + path.extname(file.originalname));\r\n    }\r\n});\r\nconst upload = multer({ storage: storage });\r\n\r\n// Ensure uploads folder exists\r\nif (!fs.existsSync('uploads')) {\r\n    fs.mkdirSync('uploads');\r\n}\r\n\r\n// Route to send message\r\napp.post('/send-message', async (req, res) => {\r\n    const { username, message, mediaUrl } = req.body;\r\n\r\n    if (!username || (!message && !mediaUrl)) {\r\n        return res.status(400).send({ error: 'Username and either message or media are required' });\r\n    }\r\n\r\n    const newMessage = new Message({ username, message, mediaUrl });\r\n    try {\r\n        await newMessage.save();\r\n\r\n        // Publish message to Ably\r\n        channel.publish('new-message', { username, message, mediaUrl, timestamp: newMessage.timestamp });\r\n\r\n        res.status(200).send('Message sent');\r\n    } catch (error) {\r\n        console.error('Error saving message:', error);\r\n        res.status(500).send({ error: 'Error saving message' });\r\n    }\r\n});\r\n\r\n// File upload route\r\napp.post('/upload', upload.single('file'), (req, res) => {\r\n    if (!req.file) {\r\n        return res.status(400).send({ error: 'No file uploaded' });\r\n    }\r\n    const mediaUrl = `/uploads/${req.file.filename}`;  // Fixed the string interpolation here\r\n    res.json({ mediaUrl });\r\n});\r\n\r\n// Fetch all messages\r\napp.get('/messages', async (req, res) => {\r\n    try {\r\n        const messages = await Message.find().sort({ timestamp: 1 });\r\n        res.json(messages);\r\n    } catch (error) {\r\n        console.error('Error fetching messages:', error);\r\n        res.status(500).send({ error: 'Error fetching messages' });\r\n    }\r\n});\r\n\r\n// Clear all messages\r\napp.delete('/messages', async (req, res) => {\r\n    try {\r\n        await Message.deleteMany({});\r\n        res.status(200).send('Chat cleared');\r\n    } catch (error) {\r\n        console.error('Error clearing chat:', error);\r\n        res.status(500).send({ error: 'Error clearing chat' });\r\n    }\r\n});\r\n\r\n// Serve static files (e.g., images, CSS, JS)\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Start server\r\napp.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`); // Fixed the console log\r\n});\r\n"],"file":"server.dev.js"}