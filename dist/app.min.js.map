{"version":3,"sources":["app.js"],"names":["document","addEventListener","response","username","displayMessage","_ref","message","mediaUrl","timestamp","chatChannel","channels","createElement","messageElement","className","toLocaleTimeString","time","getElementById","scrollTop","scrollHeight","Realtime","key","get","subscribe","data","messages","messageInput","fileInput","formData","uploadResponse","_ref2","uploadedMediaUrl","regeneratorRuntime","async","_context2","prev","next","value","trim","alert","abrupt","files","length","FormData","append","awrap","fetch","method","body","sent","json","t0","console","error","Content-Type","JSON","stringify","t1","stop","event","target","_context3","innerHTML","_context","forEach"],"mappings":"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","file":"app.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    let username = '';\r\n    const ably = new Ably.Realtime({ key: 'A2d_-A.1BaGMw:stl13eplJUOlO1UI5slUxDy9S17jg6FaoM9CsWQJYUk' });\r\n    const chatChannel = ably.channels.get('chat-channel');\r\n\r\n    // Function to display a message\r\n    function displayMessage({ username, message, mediaUrl, timestamp }) {\r\n        const messageElement = document.createElement('div');\r\n        messageElement.className = 'message';\r\n\r\n        const time = new Date(timestamp).toLocaleTimeString();\r\n        messageElement.innerHTML = `\r\n            <div class=\"msg-bubble ${username === 'you' ? 'user-msg' : 'bot-msg'}\">\r\n                <strong>${username}</strong> <span>(${time})</span><br>\r\n                ${message || ''}\r\n                ${mediaUrl ? `<br><img src=\"${mediaUrl}\" alt=\"Media\" style=\"max-width: 100%;\">` : ''}\r\n            </div>\r\n        `;\r\n\r\n        document.getElementById('messages-container').appendChild(messageElement);\r\n        document.getElementById('messages-container').scrollTop = document.getElementById('messages-container').scrollHeight;\r\n    }\r\n\r\n    // Fetch messages on load\r\n    async function fetchMessages() {\r\n        try {\r\n            const response = await fetch('/api/messages'); // Updated to use the serverless API route\r\n            const messages = await response.json();\r\n            messages.forEach(displayMessage);\r\n        } catch (error) {\r\n            console.error('Error fetching messages:', error);\r\n        }\r\n    }\r\n\r\n    // Listen for new messages from Ably\r\n    chatChannel.subscribe('new-message', (message) => {\r\n        displayMessage(message.data);\r\n    });\r\n\r\n    // Handle message sending\r\n    document.getElementById('send-message-btn').addEventListener('click', async () => {\r\n        const messageInput = document.getElementById('user-message');\r\n        const fileInput = document.getElementById('file-input');\r\n        const message = messageInput.value.trim();\r\n\r\n        if (!username) {\r\n            alert(\"Please enter a username before sending a message.\");\r\n            return;\r\n        }\r\n\r\n        if (message || (fileInput && fileInput.files.length > 0)) {\r\n            let mediaUrl = '';\r\n\r\n            // Handle file upload\r\n            if (fileInput && fileInput.files.length > 0) {\r\n                const formData = new FormData();\r\n                formData.append('file', fileInput.files[0]);\r\n\r\n                try {\r\n                    const uploadResponse = await fetch('/api/upload', { method: 'POST', body: formData }); // Updated to serverless API\r\n                    const { mediaUrl: uploadedMediaUrl } = await uploadResponse.json();\r\n                    mediaUrl = uploadedMediaUrl;\r\n                } catch (error) {\r\n                    console.error('Error uploading file:', error);\r\n                    alert('Failed to upload file.');\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Send message\r\n            try {\r\n                await fetch('/api/send-message', { // Updated to serverless API\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ username, message, mediaUrl })\r\n                });\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n                alert('Failed to send message.');\r\n            }\r\n\r\n            messageInput.value = '';\r\n            if (fileInput) fileInput.value = ''; // Clear the file input\r\n        } else {\r\n            alert(\"Message cannot be empty.\");\r\n        }\r\n    });\r\n\r\n    // Set username\r\n    document.getElementById('username-input').addEventListener('input', (event) => {\r\n        username = event.target.value.trim() || 'you';\r\n    });\r\n\r\n    // Clear chat\r\n    document.getElementById('clear-chat-btn').addEventListener('click', async () => {\r\n        try {\r\n            await fetch('/api/messages', { method: 'DELETE' }); // Updated to serverless API\r\n            document.getElementById('messages-container').innerHTML = '';\r\n        } catch (error) {\r\n            console.error('Error clearing chat:', error);\r\n            alert('Failed to clear chat.');\r\n        }\r\n    });\r\n\r\n    // Initial messages fetch\r\n    fetchMessages();\r\n});\r\n"]}